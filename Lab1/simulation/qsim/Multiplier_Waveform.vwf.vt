// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/09/2024 10:50:40"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    shift_multiplier_8_bit_data
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module shift_multiplier_8_bit_data_vlg_sample_tst(
	i_a,
	i_b,
	i_clock,
	i_initialize,
	i_loadOut,
	i_loadPR,
	i_setCounter,
	i_shift,
	sampler_tx
);
input [7:0] i_a;
input [7:0] i_b;
input  i_clock;
input  i_initialize;
input  i_loadOut;
input  i_loadPR;
input  i_setCounter;
input  i_shift;
output sampler_tx;

reg sample;
time current_time;
always @(i_a or i_b or i_clock or i_initialize or i_loadOut or i_loadPR or i_setCounter or i_shift)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module shift_multiplier_8_bit_data_vlg_check_tst (
	o_countDone,
	o_multiplier_LSB,
	o_multiplier_second_LSB,
	o_product,
	sampler_rx
);
input  o_countDone;
input  o_multiplier_LSB;
input  o_multiplier_second_LSB;
input [15:0] o_product;
input sampler_rx;

reg  o_countDone_expected;
reg  o_multiplier_LSB_expected;
reg  o_multiplier_second_LSB_expected;
reg [15:0] o_product_expected;

reg  o_countDone_prev;
reg  o_multiplier_LSB_prev;
reg  o_multiplier_second_LSB_prev;
reg [15:0] o_product_prev;

reg  o_countDone_expected_prev;
reg  o_multiplier_LSB_expected_prev;
reg  o_multiplier_second_LSB_expected_prev;
reg [15:0] o_product_expected_prev;

reg  last_o_countDone_exp;
reg  last_o_multiplier_LSB_exp;
reg  last_o_multiplier_second_LSB_exp;
reg [15:0] last_o_product_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	o_countDone_prev = o_countDone;
	o_multiplier_LSB_prev = o_multiplier_LSB;
	o_multiplier_second_LSB_prev = o_multiplier_second_LSB;
	o_product_prev = o_product;
end

// update expected /o prevs

always @(trigger)
begin
	o_countDone_expected_prev = o_countDone_expected;
	o_multiplier_LSB_expected_prev = o_multiplier_LSB_expected;
	o_multiplier_second_LSB_expected_prev = o_multiplier_second_LSB_expected;
	o_product_expected_prev = o_product_expected;
end



// expected o_countDone
initial
begin
	o_countDone_expected = 1'bX;
end 

// expected o_multiplier_LSB
initial
begin
	o_multiplier_LSB_expected = 1'bX;
end 

// expected o_multiplier_second_LSB
initial
begin
	o_multiplier_second_LSB_expected = 1'bX;
end 
// expected o_product[ 15 ]
initial
begin
	o_product_expected[15] = 1'bX;
end 
// expected o_product[ 14 ]
initial
begin
	o_product_expected[14] = 1'bX;
end 
// expected o_product[ 13 ]
initial
begin
	o_product_expected[13] = 1'bX;
end 
// expected o_product[ 12 ]
initial
begin
	o_product_expected[12] = 1'bX;
end 
// expected o_product[ 11 ]
initial
begin
	o_product_expected[11] = 1'bX;
end 
// expected o_product[ 10 ]
initial
begin
	o_product_expected[10] = 1'bX;
end 
// expected o_product[ 9 ]
initial
begin
	o_product_expected[9] = 1'bX;
end 
// expected o_product[ 8 ]
initial
begin
	o_product_expected[8] = 1'bX;
end 
// expected o_product[ 7 ]
initial
begin
	o_product_expected[7] = 1'bX;
end 
// expected o_product[ 6 ]
initial
begin
	o_product_expected[6] = 1'bX;
end 
// expected o_product[ 5 ]
initial
begin
	o_product_expected[5] = 1'bX;
end 
// expected o_product[ 4 ]
initial
begin
	o_product_expected[4] = 1'bX;
end 
// expected o_product[ 3 ]
initial
begin
	o_product_expected[3] = 1'bX;
end 
// expected o_product[ 2 ]
initial
begin
	o_product_expected[2] = 1'bX;
end 
// expected o_product[ 1 ]
initial
begin
	o_product_expected[1] = 1'bX;
end 
// expected o_product[ 0 ]
initial
begin
	o_product_expected[0] = 1'bX;
end 
// generate trigger
always @(o_countDone_expected or o_countDone or o_multiplier_LSB_expected or o_multiplier_LSB or o_multiplier_second_LSB_expected or o_multiplier_second_LSB or o_product_expected or o_product)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected o_countDone = %b | expected o_multiplier_LSB = %b | expected o_multiplier_second_LSB = %b | expected o_product = %b | ",o_countDone_expected_prev,o_multiplier_LSB_expected_prev,o_multiplier_second_LSB_expected_prev,o_product_expected_prev);
	$display("| real o_countDone = %b | real o_multiplier_LSB = %b | real o_multiplier_second_LSB = %b | real o_product = %b | ",o_countDone_prev,o_multiplier_LSB_prev,o_multiplier_second_LSB_prev,o_product_prev);
`endif
	if (
		( o_countDone_expected_prev !== 1'bx ) && ( o_countDone_prev !== o_countDone_expected_prev )
		&& ((o_countDone_expected_prev !== last_o_countDone_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_countDone :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_countDone_expected_prev);
		$display ("     Real value = %b", o_countDone_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_countDone_exp = o_countDone_expected_prev;
	end
	if (
		( o_multiplier_LSB_expected_prev !== 1'bx ) && ( o_multiplier_LSB_prev !== o_multiplier_LSB_expected_prev )
		&& ((o_multiplier_LSB_expected_prev !== last_o_multiplier_LSB_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_multiplier_LSB :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_multiplier_LSB_expected_prev);
		$display ("     Real value = %b", o_multiplier_LSB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o_multiplier_LSB_exp = o_multiplier_LSB_expected_prev;
	end
	if (
		( o_multiplier_second_LSB_expected_prev !== 1'bx ) && ( o_multiplier_second_LSB_prev !== o_multiplier_second_LSB_expected_prev )
		&& ((o_multiplier_second_LSB_expected_prev !== last_o_multiplier_second_LSB_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_multiplier_second_LSB :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_multiplier_second_LSB_expected_prev);
		$display ("     Real value = %b", o_multiplier_second_LSB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_o_multiplier_second_LSB_exp = o_multiplier_second_LSB_expected_prev;
	end
	if (
		( o_product_expected_prev[0] !== 1'bx ) && ( o_product_prev[0] !== o_product_expected_prev[0] )
		&& ((o_product_expected_prev[0] !== last_o_product_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_product[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_product_expected_prev);
		$display ("     Real value = %b", o_product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_o_product_exp[0] = o_product_expected_prev[0];
	end
	if (
		( o_product_expected_prev[1] !== 1'bx ) && ( o_product_prev[1] !== o_product_expected_prev[1] )
		&& ((o_product_expected_prev[1] !== last_o_product_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_product[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_product_expected_prev);
		$display ("     Real value = %b", o_product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_o_product_exp[1] = o_product_expected_prev[1];
	end
	if (
		( o_product_expected_prev[2] !== 1'bx ) && ( o_product_prev[2] !== o_product_expected_prev[2] )
		&& ((o_product_expected_prev[2] !== last_o_product_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_product[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_product_expected_prev);
		$display ("     Real value = %b", o_product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_o_product_exp[2] = o_product_expected_prev[2];
	end
	if (
		( o_product_expected_prev[3] !== 1'bx ) && ( o_product_prev[3] !== o_product_expected_prev[3] )
		&& ((o_product_expected_prev[3] !== last_o_product_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_product[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_product_expected_prev);
		$display ("     Real value = %b", o_product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_o_product_exp[3] = o_product_expected_prev[3];
	end
	if (
		( o_product_expected_prev[4] !== 1'bx ) && ( o_product_prev[4] !== o_product_expected_prev[4] )
		&& ((o_product_expected_prev[4] !== last_o_product_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_product[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_product_expected_prev);
		$display ("     Real value = %b", o_product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_o_product_exp[4] = o_product_expected_prev[4];
	end
	if (
		( o_product_expected_prev[5] !== 1'bx ) && ( o_product_prev[5] !== o_product_expected_prev[5] )
		&& ((o_product_expected_prev[5] !== last_o_product_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_product[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_product_expected_prev);
		$display ("     Real value = %b", o_product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_o_product_exp[5] = o_product_expected_prev[5];
	end
	if (
		( o_product_expected_prev[6] !== 1'bx ) && ( o_product_prev[6] !== o_product_expected_prev[6] )
		&& ((o_product_expected_prev[6] !== last_o_product_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_product[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_product_expected_prev);
		$display ("     Real value = %b", o_product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_o_product_exp[6] = o_product_expected_prev[6];
	end
	if (
		( o_product_expected_prev[7] !== 1'bx ) && ( o_product_prev[7] !== o_product_expected_prev[7] )
		&& ((o_product_expected_prev[7] !== last_o_product_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_product[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_product_expected_prev);
		$display ("     Real value = %b", o_product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_o_product_exp[7] = o_product_expected_prev[7];
	end
	if (
		( o_product_expected_prev[8] !== 1'bx ) && ( o_product_prev[8] !== o_product_expected_prev[8] )
		&& ((o_product_expected_prev[8] !== last_o_product_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_product[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_product_expected_prev);
		$display ("     Real value = %b", o_product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_o_product_exp[8] = o_product_expected_prev[8];
	end
	if (
		( o_product_expected_prev[9] !== 1'bx ) && ( o_product_prev[9] !== o_product_expected_prev[9] )
		&& ((o_product_expected_prev[9] !== last_o_product_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_product[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_product_expected_prev);
		$display ("     Real value = %b", o_product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_o_product_exp[9] = o_product_expected_prev[9];
	end
	if (
		( o_product_expected_prev[10] !== 1'bx ) && ( o_product_prev[10] !== o_product_expected_prev[10] )
		&& ((o_product_expected_prev[10] !== last_o_product_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_product[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_product_expected_prev);
		$display ("     Real value = %b", o_product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_o_product_exp[10] = o_product_expected_prev[10];
	end
	if (
		( o_product_expected_prev[11] !== 1'bx ) && ( o_product_prev[11] !== o_product_expected_prev[11] )
		&& ((o_product_expected_prev[11] !== last_o_product_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_product[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_product_expected_prev);
		$display ("     Real value = %b", o_product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_o_product_exp[11] = o_product_expected_prev[11];
	end
	if (
		( o_product_expected_prev[12] !== 1'bx ) && ( o_product_prev[12] !== o_product_expected_prev[12] )
		&& ((o_product_expected_prev[12] !== last_o_product_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_product[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_product_expected_prev);
		$display ("     Real value = %b", o_product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_o_product_exp[12] = o_product_expected_prev[12];
	end
	if (
		( o_product_expected_prev[13] !== 1'bx ) && ( o_product_prev[13] !== o_product_expected_prev[13] )
		&& ((o_product_expected_prev[13] !== last_o_product_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_product[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_product_expected_prev);
		$display ("     Real value = %b", o_product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_o_product_exp[13] = o_product_expected_prev[13];
	end
	if (
		( o_product_expected_prev[14] !== 1'bx ) && ( o_product_prev[14] !== o_product_expected_prev[14] )
		&& ((o_product_expected_prev[14] !== last_o_product_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_product[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_product_expected_prev);
		$display ("     Real value = %b", o_product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_o_product_exp[14] = o_product_expected_prev[14];
	end
	if (
		( o_product_expected_prev[15] !== 1'bx ) && ( o_product_prev[15] !== o_product_expected_prev[15] )
		&& ((o_product_expected_prev[15] !== last_o_product_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_product[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_product_expected_prev);
		$display ("     Real value = %b", o_product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_o_product_exp[15] = o_product_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module shift_multiplier_8_bit_data_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] i_a;
reg [7:0] i_b;
reg i_clock;
reg i_initialize;
reg i_loadOut;
reg i_loadPR;
reg i_setCounter;
reg i_shift;
// wires                                               
wire o_countDone;
wire o_multiplier_LSB;
wire o_multiplier_second_LSB;
wire [15:0] o_product;

wire sampler;                             

// assign statements (if any)                          
shift_multiplier_8_bit_data i1 (
// port map - connection between master ports and signals/registers   
	.i_a(i_a),
	.i_b(i_b),
	.i_clock(i_clock),
	.i_initialize(i_initialize),
	.i_loadOut(i_loadOut),
	.i_loadPR(i_loadPR),
	.i_setCounter(i_setCounter),
	.i_shift(i_shift),
	.o_countDone(o_countDone),
	.o_multiplier_LSB(o_multiplier_LSB),
	.o_multiplier_second_LSB(o_multiplier_second_LSB),
	.o_product(o_product)
);

// i_clock
always
begin
	i_clock = 1'b0;
	i_clock = #500 1'b1;
	#500;
end 
// i_a[ 7 ]
initial
begin
	i_a[7] = 1'b0;
end 
// i_a[ 6 ]
initial
begin
	i_a[6] = 1'b0;
end 
// i_a[ 5 ]
initial
begin
	i_a[5] = 1'b0;
end 
// i_a[ 4 ]
initial
begin
	i_a[4] = 1'b0;
end 
// i_a[ 3 ]
initial
begin
	i_a[3] = 1'b0;
end 
// i_a[ 2 ]
initial
begin
	i_a[2] = 1'b1;
end 
// i_a[ 1 ]
initial
begin
	i_a[1] = 1'b0;
end 
// i_a[ 0 ]
initial
begin
	i_a[0] = 1'b1;
end 
// i_b[ 7 ]
initial
begin
	i_b[7] = 1'b0;
end 
// i_b[ 6 ]
initial
begin
	i_b[6] = 1'b0;
end 
// i_b[ 5 ]
initial
begin
	i_b[5] = 1'b0;
end 
// i_b[ 4 ]
initial
begin
	i_b[4] = 1'b0;
end 
// i_b[ 3 ]
initial
begin
	i_b[3] = 1'b0;
end 
// i_b[ 2 ]
initial
begin
	i_b[2] = 1'b1;
end 
// i_b[ 1 ]
initial
begin
	i_b[1] = 1'b1;
end 
// i_b[ 0 ]
initial
begin
	i_b[0] = 1'b0;
end 

// i_initialize
initial
begin
	i_initialize = 1'b0;
	i_initialize = #2000 1'b1;
	i_initialize = #1000 1'b0;
end 

// i_loadOut
initial
begin
	i_loadOut = 1'b0;
	i_loadOut = #7000 1'b1;
	i_loadOut = #1000 1'b0;
end 

// i_setCounter
initial
begin
	i_setCounter = 1'b0;
	i_setCounter = #2000 1'b1;
	i_setCounter = #1000 1'b0;
end 

// i_loadPR
initial
begin
	i_loadPR = 1'b0;
	i_loadPR = #5000 1'b1;
	i_loadPR = #2000 1'b0;
end 

// i_shift
initial
begin
	i_shift = 1'b0;
	i_shift = #4000 1'b1;
	i_shift = #3000 1'b0;
end 

shift_multiplier_8_bit_data_vlg_sample_tst tb_sample (
	.i_a(i_a),
	.i_b(i_b),
	.i_clock(i_clock),
	.i_initialize(i_initialize),
	.i_loadOut(i_loadOut),
	.i_loadPR(i_loadPR),
	.i_setCounter(i_setCounter),
	.i_shift(i_shift),
	.sampler_tx(sampler)
);

shift_multiplier_8_bit_data_vlg_check_tst tb_out(
	.o_countDone(o_countDone),
	.o_multiplier_LSB(o_multiplier_LSB),
	.o_multiplier_second_LSB(o_multiplier_second_LSB),
	.o_product(o_product),
	.sampler_rx(sampler)
);
endmodule

